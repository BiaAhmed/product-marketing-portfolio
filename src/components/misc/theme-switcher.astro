---
import { clsx } from "@utils/index";
---

<button
  class={clsx(
    "theme-toggle",                                 /* shared hook for JS */
    "rounded-full p-2 hover:bg-gray-100 dark:hover:bg-gray-800",
    "transition-colors duration-200"
  )}
  aria-label="Toggle colour scheme"
>
  <!-- Sun – visible in LIGHT -->
  <svg
    class="w-5 h-5 dark:hidden"
    xmlns="http://www.w3.org/2000/svg"
    fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343
         6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16
         12a4 4 0 11-8 0 4 4 0 018 0z"/>
  </svg>

  <!-- Moon – visible in DARK -->
  <svg
    class="hidden w-5 h-5 dark:block"
    xmlns="http://www.w3.org/2000/svg"
    fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003
         9.003 0 008.354-5.646z"/>
  </svg>
</button>

<!-- Theme switcher setup with proper DOM ready handling -->
<script is:inline>
  if (!window.__themeSwitcherSetup) {
    window.__themeSwitcherSetup = true;

    const getInitial = () =>
      localStorage.theme ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");

    const apply = (t) =>
      document.documentElement.classList.toggle("dark", t === "dark");

    const bindToggleButtons = () => {
      document.querySelectorAll("button.theme-toggle").forEach((btn) => {
        // Remove existing listeners to prevent duplicates
        btn.removeEventListener("click", handleThemeToggle);
        btn.addEventListener("click", handleThemeToggle);
      });
    };

    const handleThemeToggle = () => {
      const next = document.documentElement.classList.contains("dark") ? "light" : "dark";
      apply(next);
      localStorage.theme = next;
    };

    /* 1️⃣ Initialize theme */
    apply(getInitial());

    /* 2️⃣ Bind toggles when DOM is ready */
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', bindToggleButtons);
    } else {
      // DOM is already loaded
      bindToggleButtons();
    }

    /* 3️⃣ Also bind after a short delay to catch any late-rendered elements */
    setTimeout(bindToggleButtons, 100);

    /* 4️⃣ Re-bind when new theme toggles are added dynamically */
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === 1) { // Element node
            if (node.classList && node.classList.contains('theme-toggle')) {
              bindToggleButtons();
            } else if (node.querySelector && node.querySelector('.theme-toggle')) {
              bindToggleButtons();
            }
          }
        });
      });
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }
</script>